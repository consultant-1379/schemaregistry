def bob = "./bob/bob"
def local_ruleset = "ci/local_ruleset.yaml"
def ci_ruleset = "ci/common_ruleset2.0.yaml"

stage('Custom Generate Vulnerability report V2.0') {
    // Preparing kafka related pods
	sh "${bob} -r ${local_ruleset} generate-VA-report-V2"

}

if (env.RELEASE) {
    stage('Custom Publish') {
        withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS'),
        file(credentialsId: 'docker-config-json', variable: 'DOCKER_CONFIG_JSON')
        ]) {
            ci_pipeline_scripts.checkDockerConfig()
            ci_pipeline_scripts.retryMechanism("${bob} -r ${ci_ruleset} publish", 3)
            sh "${bob} -r ${local_ruleset} publish-md-oas"
            sh "${bob} -r ${local_ruleset} publish-bragent"
        }
    }
}

if (env.PRA_ENABLED == "false" && env.RELEASE) {
    stage('Custom create-git-tag') {
	    withCredentials([usernamePassword(credentialsId: 'GERRIT_PASSWORD', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD')]) {
        sh "${bob} -r ${ci_ruleset} create-git-tag"
    }
  }
}

if (env.PRA_ENABLED == "true") {
    stage('Init') {
        echo 'Inside PRA release'
            environment {
                PRA_ENABLED = env.PRA_ENABLED
                RELEASE_CANDIDATE = env.RELEASE_CANDIDATE
                DRY_RUN = env.DRY_RUN
            }
            sh "${bob} -r ${local_ruleset} init"
        }
    stage('Store release images artifacts') {
        echo 'Inside PRA release'
            environment {
                PRA_ENABLED = env.PRA_ENABLED
                RELEASE_CANDIDATE = env.RELEASE_CANDIDATE
                DRY_RUN = env.DRY_RUN
            }
            withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS'),
            string(credentialsId: 'MARKETPLACE_TOKEN_SR', variable: 'MARKETPLACE_TOKEN_SR')
            ]) {
            sh "${bob} -r ${local_ruleset} image-package-release"
            }
        }
    stage('Store release helm charts artifacts') {
        echo 'Inside PRA release'
            environment {
                PRA_ENABLED = env.PRA_ENABLED
                RELEASE_CANDIDATE = env.RELEASE_CANDIDATE
                DRY_RUN = env.DRY_RUN
            }
            withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS'),
            string(credentialsId: 'MARKETPLACE_TOKEN_SR', variable: 'MARKETPLACE_TOKEN_SR')
            ]) {
            sh "${bob} -r ${local_ruleset} helm-package-release"
            }
        }
    stage('Publish release') {
        echo 'Inside PRA release'
            environment {
                PRA_ENABLED = env.PRA_ENABLED
                RELEASE_CANDIDATE = env.RELEASE_CANDIDATE
                DRY_RUN = env.DRY_RUN
            }
            withCredentials([usernamePassword(credentialsId: 'SELI_ARTIFACTORY', usernameVariable: 'SELI_ARTIFACTORY_REPO_USER', passwordVariable: 'SELI_ARTIFACTORY_REPO_PASS'),
            string(credentialsId: 'MARKETPLACE_TOKEN_SR', variable: 'MARKETPLACE_TOKEN_SR')
            ]) {
            sh "${bob} -r ${local_ruleset} publish-release"
            }
        }
    }
